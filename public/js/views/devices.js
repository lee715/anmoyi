// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['jquery', 'backbone', 'collections/devices', 'collections/places', 'utils', 'views/container', 'views/confirm', 'text!templates/devices.ejs', 'data', 'table'], function($, B, devicesCollection, placesCollection, U, ContainerView, confirmView, devicesTemp, Data) {
    var View, columns, idMap, locales, root_columns;
    locales = {
      locs: '按地址筛选',
      locations: '按地址筛选',
      places: '按场地筛选',
      users: '按商家筛选',
      status: '按设备状态筛选'
    };
    idMap = {
      locs: 'location',
      locations: 'location',
      places: 'place',
      users: 'user',
      status: 'status'
    };
    columns = [
      {
        field: 'uid',
        title: '编号'
      }, {
        field: 'name',
        title: '名称',
        sortable: true
      }, {
        field: 'colorStatus',
        title: '状态',
        sortable: true
      }, {
        field: 'income',
        title: '收入'
      }, {
        field: 'price',
        title: '价格'
      }, {
        field: 'remission',
        title: '优惠'
      }, {
        field: 'discount',
        title: '费率'
      }
    ];
    root_columns = [
      {
        field: 'start',
        title: '开机'
      }, {
        field: 'edit',
        title: '编辑'
      }, {
        field: 'disableStr',
        title: '禁/启用'
      }, {
        field: 'delete',
        title: '删除'
      }
    ];
    return View = (function(superClass) {
      extend(View, superClass);

      function View() {
        return View.__super__.constructor.apply(this, arguments);
      }

      View.prototype.initialize = function() {
        var opts;
        this._filter = {};
        opts = {};
        this._placeId = opts._placeId = Data.query._placeId;
        Data.deviceColl = this.collection = new devicesCollection([], opts);
        this.collection.on('change:section', (function(_this) {
          return function() {
            return _this.renderDevices();
          };
        })(this));
        this.columns = columns.slice();
        if (Data.isRoot()) {
          this.columns = this.columns.concat(root_columns);
        }
        if (this._placeId) {
          this.columns = this.columns.slice(0, 3).concat([
            {
              field: 'today',
              title: '今日流水'
            }, {
              field: 'yestoday',
              title: '昨日流水'
            }
          ], this.columns.slice(3), [
            {
              field: 'section',
              title: '区间'
            }
          ]);
        }
        this.render();
        this.fetch();
        return this;
      };

      View.prototype.events = {
        'click .selector': 'onSelect',
        'submit #timeForm': 'querySection'
      };

      View.prototype.render = function() {
        this.$el.html(ejs.render(devicesTemp, {
          _placeId: this._placeId
        }));
        this.$table = this.$el.find('#devicesTable');
        this.$container = this.$el.find('#seletorContainer');
        this.$table.bootstrapTable({
          columns: this.columns,
          striped: true,
          pagination: true,
          pageSize: 50,
          search: true,
          onClickCell: (function(_this) {
            return function(field, val, obj) {
              var id, view;
              if (field === 'edit') {
                return Data.app.navigate('/devicesEdit?uid=' + obj.uid, {
                  trigger: true
                });
              } else if (field === 'delete') {
                view = new confirmView({
                  title: '删除确认',
                  content: '是否确认删除该设备?',
                  onConfirm: function() {
                    Data.del('device', obj._id);
                    return view.close();
                  },
                  onCancel: function() {
                    return view.close();
                  }
                });
                return $('body').append(view.$el);
              } else if (field === 'start') {
                id = '' + Date.now();
                console.log(id, "开机<input id=\"" + id + "\" type=\"text\" value=\"10\" />分钟?");
                view = new confirmView({
                  title: '开机确认',
                  content: "开机<input style=\"margin:0 10px 0 10px;width:60px\" id=\"" + id + "\" type=\"text\" value=\"10\" />分钟?",
                  onConfirm: function() {
                    var time;
                    time = $('#' + id).val();
                    Data.order('start', obj.uid, time);
                    return view.close();
                  },
                  onCancel: function() {
                    return view.close();
                  }
                });
                return $('body').append(view.$el);
              } else if (field === 'disableStr') {
                view = new confirmView({
                  title: '禁启用确认',
                  content: obj.disabled ? '确认启用当前设备？' : '确认禁用当前设备？',
                  onConfirm: function() {
                    $.ajax({
                      url: '/api/devices:disable',
                      method: 'put',
                      data: {
                        _id: obj._id,
                        disable: !obj.disabled ? 1 : 0
                      },
                      json: true
                    }).done(function(rt, status) {
                      if (rt.message) {
                        return Essage.show({
                          message: rt.message,
                          status: 'error'
                        }, 2000);
                      } else {
                        Essage.show({
                          message: '操作成功！',
                          status: 'success'
                        }, 2000);
                        _this.render();
                        return _this.fetch();
                      }
                    }).error(function(e) {
                      console.log(e);
                      return Essage.show({
                        message: '操作失败，未知错误',
                        status: 'error'
                      }, 2000);
                    });
                    return view.close();
                  },
                  onCancel: function() {
                    return view.close();
                  }
                });
                return $('body').append(view.$el);
              }
            };
          })(this)
        });
        return this;
      };

      View.prototype.renderPlace = function() {
        var _placeId, models, todayTotal, yestodayTotal;
        _placeId = Data.getPlaceId();
        if (!_placeId) {
          return;
        }
        (new placesCollection).getOne(_placeId, (function(_this) {
          return function(err, place) {
            place = place.parse(place.toJSON());
            return _this.$el.prepend('<span style="margin-bottom:10px">场地方: <a class="route" href="javascript:;" data-url="/places">' + place.name + '</a></span><span style="margin-bottom:10px;margin-left:20px">地理位置:' + place.address + '</span>');
          };
        })(this));
        models = this.collection.toJSON();
        todayTotal = _.reduce(_.pluck(models, 'today'), function(a, b) {
          var ref, ref1, tb1, tb2, wx1, wx2;
          ref = a.split('/'), tb1 = ref[0], wx1 = ref[1];
          ref1 = b.split('/'), tb2 = ref1[0], wx2 = ref1[1];
          return (+tb1 + +tb2) + '/' + (+wx1 + +wx2);
        });
        yestodayTotal = _.reduce(_.pluck(models, 'yestoday'), function(a, b) {
          var ref, ref1, tb1, tb2, wx1, wx2;
          ref = a.split('/'), tb1 = ref[0], wx1 = ref[1];
          ref1 = b.split('/'), tb2 = ref1[0], wx2 = ref1[1];
          return (+tb1 + +tb2) + '/' + (+wx1 + +wx2);
        });
        return this.$el.append("<span>今日流水总计: " + todayTotal + "</span><span style='margin-left:10px'>昨日流水总计: " + yestodayTotal + "</span>");
      };

      View.prototype.renderDevices = function(devices) {
        devices || (devices = this.collection.toJSON());
        return this.$table.bootstrapTable('load', devices);
      };

      View.prototype.renderQuerys = function() {
        var sub;
        if (this.containerView) {
          return this.$container.html(this.containerView.render(this._querys).el);
        } else {
          this.containerView = sub = new ContainerView(this._querys);
          return this.$container.html(sub.el);
        }
      };

      View.prototype.hideUser = function() {
        return this.$table.bootstrapTable('hideColumn', 'user');
      };

      View.prototype.refreshQuerys = function(devices) {
        var data, key, val;
        devices || (devices = this.collection.toJSON());
        this._querys = [];
        data = {
          locations: {},
          places: {},
          users: {},
          status: {}
        };
        devices.forEach(function(device) {
          var base, base1, base2, locs, name, name1, name2;
          if (!device.location) {
            return;
          }
          locs = U.cutLoc(device.location);
          locs.forEach(function(loc) {
            var base;
            (base = data.locations)[loc] || (base[loc] = 0);
            return data.locations[loc]++;
          });
          (base = data.places)[name = device.place] || (base[name] = 0);
          data.places[device.place]++;
          (base1 = data.users)[name1 = device.user] || (base1[name1] = 0);
          data.users[device.user]++;
          (base2 = data.status)[name2 = device.status] || (base2[name2] = 0);
          return data.status[device.status]++;
        });
        for (key in data) {
          val = data[key];
          if (key === 'users' && Object.keys(val).length === 1) {
            this.hideUser();
          }
          this._querys.push({
            id: idMap[key],
            name: locales[key],
            data: Object.keys(val)
          });
        }
        return this.renderQuerys();
      };

      View.prototype.fetch = function() {
        var self;
        self = this;
        return this.collection.fetch({
          remove: false,
          success: function(coll, res, opts) {
            self.renderPlace();
            self.refreshQuerys();
            return self.renderDevices();
          },
          error: function() {
            return console.log(arguments);
          }
        });
      };

      View.prototype.filter = function(options) {
        var _f, devices;
        _f = _.extend(this._filter, options);
        Object.keys(options).forEach(function(key) {
          if (_f[key] === 'all') {
            return delete _f[key];
          }
        });
        devices = _.filter(this.collection.toJSON(), function(device) {
          var key, val;
          for (key in _f) {
            val = _f[key];
            if (key === 'location') {
              if (!~device[key].indexOf(val)) {
                return false;
              }
            } else if (device[key] !== val) {
              return false;
            }
          }
          return true;
        });
        return this.renderDevices(devices);
      };

      View.prototype.onSelect = function(e) {
        var $target, f, id, val;
        $target = $(e.target);
        id = $target.data('id');
        val = $target.html();
        f = {};
        f[id] = val;
        return this.filter(f);
      };

      View.prototype.querySection = function(e) {
        var data, self;
        e.preventDefault();
        self = this;
        data = U.formData($(e.target));
        data.startDate = new Date(data.startDate);
        data.endDate = new Date(data.endDate);
        data._placeId = this._placeId;
        return this.collection.querySection(data);
      };

      return View;

    })(B.View);
  });

}).call(this);
