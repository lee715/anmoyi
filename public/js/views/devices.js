// Generated by CoffeeScript 1.9.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['jquery', 'backbone', 'collections/devices', 'utils', 'views/container', 'text!templates/devices.ejs', 'data', 'table'], function($, B, devicesCollection, U, ContainerView, devicesTemp, Data) {
    var View, columns, idMap, locales;
    locales = {
      locs: '按地址筛选',
      locations: '按地址筛选',
      places: '按场地筛选',
      users: '按商家筛选',
      status: '按设备状态筛选'
    };
    idMap = {
      locs: 'location',
      locations: 'location',
      places: 'place',
      users: 'user',
      status: 'status'
    };
    columns = [
      {
        field: 'uid',
        title: '编号'
      }, {
        field: 'name',
        title: '名称',
        sortable: true
      }, {
        field: 'user',
        title: '商家',
        sortable: true
      }, {
        field: 'location',
        title: '地址',
        sortable: true
      }, {
        field: 'colorStatus',
        title: '状态',
        sortable: true
      }, {
        field: 'price',
        title: '价格'
      }, {
        field: 'remission',
        title: '优惠'
      }, {
        field: 'discount',
        title: '费率'
      }, {
        field: 'income',
        title: '收入'
      }, {
        field: 'start',
        title: '开机'
      }, {
        field: 'edit',
        title: '编辑'
      }, {
        field: 'delete',
        title: '删除'
      }
    ];
    return View = (function(superClass) {
      extend(View, superClass);

      function View() {
        return View.__super__.constructor.apply(this, arguments);
      }

      View.prototype.initialize = function() {
        var opts;
        this._filter = {};
        opts = {};
        this._placeId = opts._placeId = Data.query._placeId;
        Data.deviceColl = this.collection = new devicesCollection([], opts);
        this.collection.on('change:section', (function(_this) {
          return function() {
            return _this.renderDevices();
          };
        })(this));
        this.columns = columns.slice();
        if (this._placeId) {
          this.columns.push({
            field: 'section',
            title: '区间'
          });
        }
        this.render();
        this.fetch();
        return this;
      };

      View.prototype.events = {
        'click .selector': 'onSelect',
        'submit #timeForm': 'querySection'
      };

      View.prototype.render = function() {
        this.$el.html(ejs.render(devicesTemp, {
          _placeId: this._placeId
        }));
        this.$table = this.$el.find('#devicesTable');
        this.$container = this.$el.find('#seletorContainer');
        this.$table.bootstrapTable({
          columns: this.columns,
          striped: true,
          pagination: true,
          pageSize: 50,
          search: true,
          onClickCell: function(field, val, obj) {
            if (field === 'edit') {
              return Data.app.navigate('/devicesEdit?uid=' + obj.uid, {
                trigger: true
              });
            } else if (field === 'delete') {
              return Data.del('device', obj._id);
            } else if (field === 'start') {
              return Data.order('start', obj.uid);
            }
          }
        });
        return this;
      };

      View.prototype.renderPlace = function() {
        var _placeId, place, ref;
        _placeId = Data.getPlaceId();
        if (!_placeId) {
          return;
        }
        place = (ref = this.collection.models[0]) != null ? ref.get('place') : void 0;
        if (place) {
          return this.$el.prepend('<div style="margin-bottom:10px">场地方: <a class="route" href="javascript:;" data-url="/places">' + place + '</a></div>');
        }
      };

      View.prototype.renderDevices = function(devices) {
        devices || (devices = this.collection.toJSON());
        return this.$table.bootstrapTable('load', devices);
      };

      View.prototype.renderQuerys = function() {
        var sub;
        if (this.containerView) {
          return this.$container.html(this.containerView.render(this._querys).el);
        } else {
          this.containerView = sub = new ContainerView(this._querys);
          return this.$container.html(sub.el);
        }
      };

      View.prototype.hideUser = function() {
        return this.$table.bootstrapTable('hideColumn', 'user');
      };

      View.prototype.refreshQuerys = function(devices) {
        var data, key, val;
        devices || (devices = this.collection.toJSON());
        this._querys = [];
        data = {
          locations: {},
          places: {},
          users: {},
          status: {}
        };
        devices.forEach(function(device) {
          var base, base1, base2, locs, name, name1, name2;
          locs = U.cutLoc(device.location);
          locs.forEach(function(loc) {
            var base;
            (base = data.locations)[loc] || (base[loc] = 0);
            return data.locations[loc]++;
          });
          (base = data.places)[name = device.place] || (base[name] = 0);
          data.places[device.place]++;
          (base1 = data.users)[name1 = device.user] || (base1[name1] = 0);
          data.users[device.user]++;
          (base2 = data.status)[name2 = device.status] || (base2[name2] = 0);
          return data.status[device.status]++;
        });
        for (key in data) {
          val = data[key];
          if (key === 'users' && Object.keys(val).length === 1) {
            this.hideUser();
          }
          this._querys.push({
            id: idMap[key],
            name: locales[key],
            data: Object.keys(val)
          });
        }
        return this.renderQuerys();
      };

      View.prototype.fetch = function() {
        var self;
        self = this;
        return this.collection.fetch({
          remove: false,
          success: function(coll, res, opts) {
            self.renderPlace();
            self.refreshQuerys();
            return self.renderDevices();
          },
          error: function() {
            return console.log(arguments);
          }
        });
      };

      View.prototype.filter = function(options) {
        var _f, devices;
        _f = _.extend(this._filter, options);
        Object.keys(options).forEach(function(key) {
          if (_f[key] === 'all') {
            return delete _f[key];
          }
        });
        devices = _.filter(this.collection.toJSON(), function(device) {
          var key, val;
          for (key in _f) {
            val = _f[key];
            if (key === 'location') {
              if (!~device[key].indexOf(val)) {
                return false;
              }
            } else if (device[key] !== val) {
              return false;
            }
          }
          return true;
        });
        return this.renderDevices(devices);
      };

      View.prototype.onSelect = function(e) {
        var $target, f, id, val;
        $target = $(e.target);
        id = $target.data('id');
        val = $target.html();
        f = {};
        f[id] = val;
        return this.filter(f);
      };

      View.prototype.querySection = function(e) {
        var data, self;
        e.preventDefault();
        self = this;
        data = U.formData($(e.target));
        data.startDate = new Date(data.startDate);
        data.endDate = new Date(data.endDate);
        data._placeId = this._placeId;
        return this.collection.querySection(data);
      };

      return View;

    })(B.View);
  });

}).call(this);
