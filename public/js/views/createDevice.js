// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['backbone', 'underscore', 'data', 'models/device', 'text!templates/createDevice.ejs', 'text!templates/alert.ejs', 'utils', 'dist', 'ejs'], function(B, _, Data, deviceModel, temp, alert, utils) {
    var Seletor, defaultVals;
    defaultVals = deviceModel.prototype.defaults;
    return Seletor = (function(superClass) {
      extend(Seletor, superClass);

      function Seletor() {
        return Seletor.__super__.constructor.apply(this, arguments);
      }

      Seletor.prototype.initialize = function(opts) {
        var id, ref;
        opts || (opts = {});
        this.type = opts.type || 'create';
        id = (ref = opts.params) != null ? ref.id : void 0;
        if (id) {
          this.model = Data.models[id];
        }
        return this.render();
      };

      Seletor.prototype.events = {
        'submit form': 'onSubmit'
      };

      Seletor.prototype.render = function(data) {
        var self;
        self = this;
        switch (this.type) {
          case 'create':
            this.fetchUsers(function(users) {
              self.users = users;
              data || (data = {});
              data.users = users;
              return self.fetchPlaces(function(places) {
                data.places = places;
                self.$el.html(ejs.render(temp, _.extend({}, defaultVals, data)));
                return self.$el.find('#distpicker').distpicker();
              });
            });
            break;
          case 'edit':
            data = this.model.toJSON();
            if (Data.isRoot()) {
              this.fetchUsers(function(users) {
                data.users = users.map(function(user) {
                  user._id = "" + user._id;
                  return user;
                });
                return self.fetchPlaces(function(places) {
                  data.places = places;
                  self.$el.html(ejs.render(temp, _.extend({}, defaultVals, data)));
                  return self.$el.find('#distpicker').distpicker();
                });
              });
            } else {
              data.users = null;
              self.$el.html(ejs.render(temp, _.extend({}, defaultVals, data)));
              self.$el.find('#distpicker').distpicker();
            }
        }
        return this;
      };

      Seletor.prototype.refresh = function(data) {
        if (!this.users) {
          return;
        }
        data || (data = this.model.toJSON());
        data.users = this.users;
        return this.$el.html(ejs.render(temp, _.extend({}, defaultVals, data)));
      };

      Seletor.prototype.showAlert = function(state, err) {
        var msg;
        switch (this.type) {
          case 'create':
            if (state === 'success') {
              msg = '创建成功，你可以继续创建';
            } else {
              msg = '创建失败，请检查表单';
            }
            break;
          case 'edit':
            if (state === 'success') {
              msg = '编辑成功!';
            } else {
              msg = '编辑失败，请检查参数';
            }
        }
        return Essage.show({
          message: msg,
          status: state
        }, 2000);
      };

      Seletor.prototype.fetchUsers = function(cb) {
        var data;
        data = {};
        return $.ajax({
          url: '/api/agents',
          method: 'get',
          json: true
        }).done(function(res, state) {
          if (state === 'success') {
            return cb(res);
          }
        });
      };

      Seletor.prototype.fetchPlaces = function(cb) {
        var data;
        data = {};
        return $.ajax({
          url: '/api/places',
          method: 'get',
          json: true
        }).done(function(res, state) {
          if (state === 'success') {
            return cb(res);
          }
        });
      };

      Seletor.prototype.onSubmit = function(e) {
        var data, self;
        e.preventDefault();
        self = this;
        data = utils.formData($(e.target));
        if (data.province && data.city && data.district) {
          data.location = data.province + "-" + data.city + "-" + data.district;
          delete data.province;
          delete data.city;
          delete data.district;
        }
        if (this.model) {
          data._id = this.model.id;
        }
        $.ajax({
          url: "/api/devices/" + (this.type || 'create'),
          data: data,
          json: true,
          method: this.type === 'edit' ? 'put' : 'post'
        }).done(function(res, state) {
          if (state === 'success') {
            if (self.model) {
              self.model.set(data);
            }
            self.refresh();
            return self.showAlert(state);
          }
        });
        return false;
      };

      return Seletor;

    })(B.View);
  });

}).call(this);
