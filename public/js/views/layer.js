// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['jquery', 'backbone', 'data', 'text!templates/layer.ejs', 'views/devices', 'views/users', 'views/createDevice', 'views/createUser', 'views/login'], function($, B, Data, layerTemp, devicesView, usersView, createDeviceView, createUserView, loginView) {
    var Layer;
    return Layer = (function(superClass) {
      extend(Layer, superClass);

      function Layer() {
        return Layer.__super__.constructor.apply(this, arguments);
      }

      Layer.prototype.initialize = function(options) {
        this.options = options || {};
        this.params = this.options.params;
        this._route = this.options.route;
        this._views = {};
        this.render();
        return this;
      };

      Layer.prototype.events = {
        'click .route': 'routeHdl'
      };

      Layer.prototype.routeHdl = function(e) {
        var url;
        url = $(e.target).data('url');
        return Data.route(url);
      };

      Layer.prototype.render = function() {
        var ref;
        this.$el.html(ejs.render(layerTemp, {
          isLogin: !!Data.user,
          isRoot: ((ref = Data.user) != null ? ref.role : void 0) === 9
        }));
        this.$main = this.$el.find('#mainSection');
        this.renderSubView();
        return this;
      };

      Layer.prototype.switchTo = function(route, params) {
        this.params = params;
        this._route = route;
        return this.render();
      };

      Layer.prototype.renderSubView = function() {
        switch (this._route) {
          case 'devices':
            return this._views.devices = new devicesView({
              el: this.$main[0]
            });
          case 'users':
            return this._views.users = new usersView({
              el: this.$main[0]
            });
          case 'devicesCreate':
            return this._views.createDevice = new createDeviceView({
              el: this.$main[0]
            });
          case 'usersCreate':
            return this._views.createUser = new createUserView({
              el: this.$main[0]
            });
          case 'login':
            return this._views.login = new loginView({
              el: this.$main[0]
            });
          case 'devicesEdit':
            return this._views.editDevice = new createDeviceView({
              el: this.$main[0],
              params: this.params,
              type: 'edit'
            });
          case 'usersEdit':
            return this._views.editUser = new createUserView({
              el: this.$main[0],
              params: this.params,
              type: 'edit'
            });
        }
      };

      return Layer;

    })(B.View);
  });

}).call(this);
