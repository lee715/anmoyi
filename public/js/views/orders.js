// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['jquery', 'backbone', 'collections/orders', 'utils', 'views/container', 'views/confirm', 'views/timepicker', 'text!templates/orders.ejs', 'data', 'table'], function($, B, ordersCollection, U, ContainerView, ConfirmView, TimeView, ordersTemp, Data) {
    var View, columns;
    columns = [
      {
        field: '_id',
        title: '订单号'
      }, {
        field: 'status',
        title: '订单状态'
      }, {
        field: 'serviceStatus',
        title: '服务状态'
      }, {
        field: 'money',
        title: '订单金额'
      }, {
        field: 'time',
        title: '服务时长'
      }, {
        field: 'mode_zh',
        title: '支付模式'
      }, {
        field: 'username',
        title: '用户'
      }, {
        field: 'deviceName',
        title: '设备名称'
      }, {
        field: 'placeName',
        title: '场地方'
      }, {
        field: 'agentName',
        title: '代理商'
      }, {
        field: 'created',
        title: '日期'
      }, {
        field: 'refund',
        title: '退款'
      }
    ];
    return View = (function(superClass) {
      extend(View, superClass);

      function View() {
        return View.__super__.constructor.apply(this, arguments);
      }

      View.prototype.initialize = function() {
        this._filter = {};
        Data.orderColl = this.collection = new ordersCollection();
        this.render();
        this.fetch();
        return this;
      };

      View.prototype.events = {
        'click .selector': 'onSelect'
      };

      View.prototype.render = function() {
        var timeView;
        this.$el.html(ejs.render(ordersTemp));
        timeView = new TimeView();
        this.$el.prepend(timeView.render().el);
        this.$table = this.$el.find('#ordersTable');
        this.$container = this.$el.find('#seletorContainer');
        this.$table.bootstrapTable({
          columns: columns,
          striped: true,
          pagination: true,
          pageSize: 50,
          search: true,
          onClickCell: (function(_this) {
            return function(field, val, obj) {
              var view;
              if (field === 'refund') {
                view = new ConfirmView({
                  title: '退款确认',
                  content: "是否确认退还该订单款项（人民币" + obj.money + "元）？",
                  btns: {
                    confirm: '确认',
                    cancel: '取消'
                  },
                  onConfirm: function() {
                    _this.refund(obj);
                    return view.close();
                  },
                  onCancel: function() {
                    return view.close();
                  }
                });
                return $('body').append(view.$el);
              }
            };
          })(this)
        });
        timeView.on('submit', (function(_this) {
          return function(data) {
            return _this.fetch(data);
          };
        })(this));
        return this;
      };

      View.prototype.renderOrders = function(orders) {
        orders || (orders = this.collection.toJSON());
        return this.$table.bootstrapTable('load', orders);
      };

      View.prototype.refund = function(order) {
        var self;
        self = this;
        return $.ajax({
          url: "/api/wx/refund?_orderId=" + order._id,
          json: true
        }).done((function(_this) {
          return function(res) {
            if (res.code || res.msg) {
              return Essage.show({
                message: '退款失败: ' + res.msg,
                status: 'error'
              }, 2000);
            } else {
              return Essage.show({
                message: '退款成功',
                status: 'success'
              }, 2000);
            }
          };
        })(this)).fail(function(err) {
          return Essage.show({
            message: '退款失败',
            status: 'error'
          }, 2000);
        });
      };

      View.prototype.fetch = function(opts) {
        var self;
        self = this;
        return this.collection.fetch({
          data: opts,
          success: function(coll, res, opts) {
            return self.renderOrders();
          },
          error: function() {
            return console.log(arguments);
          }
        });
      };

      View.prototype.onSelect = function(e) {
        var $target, f, id, val;
        $target = $(e.target);
        id = $target.data('id');
        val = $target.html();
        f = {};
        f[id] = val;
        return this.filter(f);
      };

      return View;

    })(B.View);
  });

}).call(this);
