// Generated by CoffeeScript 1.10.0
(function() {
  define(['utils', 'models/user'], function(utils, userModel) {
    var Data;
    window.data = Data = {
      models: {},
      query: {},
      getPlaceId: function() {
        return this._placeId || this.query._placeId;
      },
      dontHandle: function() {
        return /^\/url/.test(location.pathname);
      },
      checkLogin: function(route, cb) {
        if (route === 'login') {
          return cb();
        } else if (this.user) {
          return cb();
        } else {
          return this.login();
        }
      },
      home: function() {
        var role, url;
        if (this.dontHandle()) {
          return;
        }
        if (this.user) {
          role = this.user.get('role');
          if (role === 'place') {
            this._placeId = this.user.id;
          }
          if (role === 'place') {
            url = '/reconciliation';
          } else if (role === 'salesman') {
            url = '/orders';
          } else {
            url = '/places';
          }
          return this.app.navigate(url, {
            trigger: true
          });
        } else {
          return this.login();
        }
      },
      handleQuery: function() {
        var query;
        query = utils.query2obj(location.search);
        return this.query = query;
      },
      login: function() {
        if (this.dontHandle()) {
          return;
        }
        return this.app.navigate('/login', {
          trigger: true
        });
      },
      route: function(url) {
        console.log('Data.route', url);
        if (this.user.get('role') === 'place' && url !== '/usersEdit') {
          return this.home();
        }
        return this.app.navigate(url, {
          trigger: true
        });
      },
      storeUser: function(user) {
        return this.user = new userModel(user);
      },
      isRoot: function() {
        return this.user.get('role') === 'root';
      },
      isAgent: function() {
        return this.user.get('role') === 'agent';
      },
      refresh: function() {
        return location.reload();
      },
      order: function(order, uid, time) {
        return $.ajax({
          url: "/api/devices/order",
          data: {
            uid: uid,
            order: order,
            time: time
          },
          json: true
        }).done(function(res, state) {
          return Essage.show({
            message: state === 'success' ? '开机成功' : '开机失败',
            status: state
          }, 2000);
        }).error(function() {
          return Essage.show({
            message: '开机失败',
            status: 'error'
          }, 2000);
        });
      },
      del: function(type, id) {
        var self;
        self = this;
        return $.ajax({
          url: "/api/" + type + "s",
          data: {
            _id: id
          },
          method: 'delete',
          json: true
        }).done(function(res, state) {
          Essage.show({
            message: state === 'success' ? '删除成功' : '删除失败',
            status: state
          }, 2000);
          return setTimeout(function() {
            return self.refresh();
          }, 2000);
        }).error(function() {
          Essage.show({
            message: '删除失败',
            status: 'error'
          }, 2000);
          return setTimeout(function() {
            return self.refresh();
          }, 2000);
        });
      }
    };
    return Data;
  });

}).call(this);
