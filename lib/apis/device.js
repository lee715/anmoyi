// Generated by CoffeeScript 1.9.1
(function() {
  var API, _, canEdit, createValidator, db, deviceJson, needCreate, pluck, sockSrv, u, userSrv;

  _ = require('lodash');

  db = require('limbo').use('anmoyi');

  u = require('../services/util');

  userSrv = require('../services/user');

  sockSrv = require('../services/socket');

  pluck = function(keys) {
    return function(arr) {
      var rt;
      rt = [];
      arr.forEach(function(item) {
        return rt.push(_.pick(item, keys));
      });
      return rt;
    };
  };

  deviceJson = ['_id', 'lastUsed', 'uid', '_userId', 'created', 'updated', 'place', 'location', 'price', 'status', 'discount', 'remission', 'income'];

  createValidator = {
    _placeId: "ObjectId",
    price: "Number",
    time: "Number",
    discount: "Number",
    remission: "Number",
    uid: "String:required",
    name: "String:required",
    _userId: "ObjectId:required"
  };

  needCreate = Object.keys(createValidator);

  canEdit = needCreate;

  API = (function() {
    function API() {}

    API.prototype.createDevice = function(req, callback) {
      var params;
      params = _.pick(req.body, needCreate);
      return db.device.create(params, function(err, device) {
        return callback(err, device);
      });
    };

    API.prototype.createDevice.route = ['post', '/devices'];

    API.prototype.createDevice.before = [userSrv.isRoot];

    API.prototype.createDevice.validator = createValidator;

    API.prototype.editDevice = function(req, callback) {
      var _id, data;
      _id = req.body._id;
      data = _.pick(req.body, canEdit);
      return db.device.update({
        _id: _id
      }, data, callback);
    };

    API.prototype.editDevice.route = ['put', '/devices'];

    API.prototype.editDevice.validator = {
      _id: "ObjectId:required",
      $or: {
        _placeId: "ObjectId",
        price: "Number",
        time: "Number",
        discount: "Number",
        remission: "Number",
        name: "String",
        _userId: "ObjectId"
      }
    };

    API.prototype.delDevice = function(req, callback) {
      var _id;
      _id = req.body._id;
      return db.device.remove({
        _id: _id
      }, callback);
    };

    API.prototype.delDevice.route = ['delete', '/devices'];

    API.prototype.order = function(req, callback) {
      var order, ref, uid;
      ref = req.query, uid = ref.uid, order = ref.order;
      return sockSrv.start(uid, 10, callback);
    };

    API.prototype.order.route = ['get', '/devices/order'];

    API.prototype.order.before = [userSrv.isRoot];

    API.prototype.fetchDevices = function(req, callback) {
      var _placeId, cons, role, user;
      user = req._data.user;
      role = user.role;
      _placeId = req.query._placeId;
      console.log('fetchDevices._placeId', _placeId);
      if (role === 'root') {
        cons = {};
      } else {
        cons = {
          _userId: _userId
        };
      }
      if (_placeId) {
        cons._placeId = _placeId;
      }
      return db.device.findAsync(cons).then(function(devices) {
        var map, placeids, userids;
        map = {};
        userids = [];
        placeids = [];
        devices.forEach(function(device) {
          device.status = device.realStatus;
          if (device._userId) {
            userids.push("" + device._userId);
          }
          if (device._placeId) {
            return placeids.push("" + device._placeId);
          }
        });
        return db.user.findAsync({
          _id: {
            $in: _.uniq(userids)
          }
        }).then(function(users) {
          users.forEach(function(user) {
            return map["" + user._id] = user.name;
          });
          return devices.map(function(device) {
            device = device.toJSON();
            device.user = map["" + device._userId];
            return device;
          });
        }).then(function(devices) {
          return db.place.findAsync({
            _id: {
              $in: _.uniq(placeids)
            }
          }).then(function(places) {
            places.forEach(function(place) {
              return map["" + place._id] = place;
            });
            return devices.map(function(device) {
              device.location = map["" + device._placeId].location;
              device.place = map["" + device._placeId].name;
              return device;
            });
          });
        });
      }).then(function(devices) {
        console.log('devices', devices);
        return callback(null, devices);
      })["catch"](function(e) {
        return console.log(e.stack);
      });
    };

    API.prototype.fetchDevices.route = ['get', '/devices'];

    API.prototype.fetchDevices.before = [userSrv.isAgent];

    return API;

  })();

  module.exports = new API;

}).call(this);
