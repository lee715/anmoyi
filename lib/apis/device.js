// Generated by CoffeeScript 1.9.1
(function() {
  var API, _, canEdit, createValidator, db, deviceJson, needCreate, pluck, u;

  _ = require('lodash');

  db = require('limbo').use('anmoyi');

  u = require('../services/util');

  pluck = function(keys) {
    return function(arr) {
      var rt;
      rt = [];
      arr.forEach(function(item) {
        return rt.push(_.pick(item, keys));
      });
      return rt;
    };
  };

  deviceJson = ['_id', 'lastUsed', 'uid', '_userId', 'created', 'updated', 'place', 'location', 'price', 'status', 'discount', 'remission', 'income'];

  createValidator = {
    _placeId: "ObjectId",
    price: "Number",
    time: "Number",
    discount: "Number",
    remission: "Number",
    uid: "String:required",
    name: "String:required",
    _userId: "ObjectId:required"
  };

  needCreate = Object.keys(createValidator);

  canEdit = '_placeId price time discount remission name _userId'.split(' ');

  API = (function() {
    function API() {}

    API.prototype.createDevice = function(req, callback) {
      var params;
      params = _.pick(req.body, needCreate);
      return db.device.create(params, callback);
    };

    API.prototype.createDevice.route = ['post', '/devices/create'];

    API.prototype.createDevice.validator = createValidator;

    API.prototype.editDevice = function(req, callback) {
      var _id, data;
      _id = req.body._id;
      data = _.pick(req.body, canEdit);
      return db.device.update({
        _id: _id
      }, data, callback);
    };

    API.prototype.editDevice.route = ['put', '/devices/edit'];

    API.prototype.editDevice.validator = {
      _id: "ObjectId:required",
      $or: {
        _placeId: "ObjectId",
        price: "Number",
        time: "Number",
        discount: "Number",
        remission: "Number",
        name: "String",
        _userId: "ObjectId"
      }
    };

    API.prototype.delDevice = function(req, callback) {
      var _id;
      _id = req.body._id;
      return db.device.remove({
        _id: _id
      }, callback);
    };

    API.prototype.delDevice.route = ['delete', '/devices/del'];

    API.prototype.fetchDevices = function(req, callback) {
      var _userId;
      console.log('fetchDevices session', req.session);
      _userId = req.session._userId;
      return db.user.findOneAsync({
        _id: _userId
      }).then(function(user) {
        var cons, role;
        role = user.role;
        if (role === 9) {
          cons = {};
        } else {
          cons = {
            _userId: _userId
          };
        }
        console.log('cons', cons);
        return db.device.findAsync(cons);
      }).then(function(devices) {
        var ids, map;
        map = {};
        ids = [];
        devices.forEach(function(device) {
          if (device._userId) {
            return ids.push("" + device._userId);
          }
        });
        console.log('ids', _.uniq(ids));
        return db.user.findAsync({
          _id: {
            $in: _.uniq(ids)
          }
        }).then(function(users) {
          users.forEach(function(user) {
            return map["" + user._id] = user.name;
          });
          devices = devices.map(function(device) {
            device = _.pick(device, deviceJson);
            device.user = map["" + device._userId];
            return device;
          });
          return callback(null, devices);
        });
      })["catch"](function(e) {
        return console.log(e.stack);
      });
    };

    API.prototype.fetchDevices.route = ['get', '/devices'];

    return API;

  })();

  module.exports = new API;

}).call(this);
