// Generated by CoffeeScript 1.9.1
(function() {
  var API, _, db, formatUser, pluck, u;

  _ = require('lodash');

  db = require('limbo').use('anmoyi');

  u = require('./services/util');

  pluck = function(keys) {
    return function(arr) {
      var rt;
      rt = [];
      arr.forEach(function(item) {
        return rt.push(_.pick(item, keys));
      });
      return rt;
    };
  };

  formatUser = function(user) {
    return _.pick(user, ['_id', 'role', 'email', 'name', 'company', 'phone', 'location']);
  };

  API = (function() {
    function API() {}

    API.prototype.login = function(req, callback) {
      var email, password, ref;
      ref = req.body, email = ref.email, password = ref.password;
      return db.user.findOne({
        email: email
      }, function(err, user) {
        if (err || !user) {
          return req.res.status(401).send('user');
        } else if (user && user.password !== password) {
          return req.res.status(401).send('password');
        } else {
          req.session._userId = "" + user._id;
          return req.res.json(formatUser(user));
        }
      });
    };

    API.prototype.login.route = ['post', '/login'];

    API.prototype.login.validator = {
      email: "Email:required",
      password: "String:required"
    };

    API.prototype.logout = function(req, callback) {
      req.session._userId = '';
      return req.res.redirect('/login');
    };

    API.prototype.logout.route = ['get', '/logout'];

    API.prototype.me = function(req, callback) {
      var _userId;
      _userId = req.session._userId;
      if (_userId) {
        return db.user.findOne({
          _id: _userId
        }, function(err, user) {
          if (err || !user) {
            return req.res.status(401).send('user');
          } else {
            return callback(null, formatUser(user));
          }
        });
      } else {
        return req.res.status(401).send('user');
      }
    };

    API.prototype.me.route = ['get', '/users/me'];

    API.prototype.fetchUsers = function(req, callback) {
      return db.user.findAsync({}).then(function(users) {
        return callback(null, users);
      });
    };

    API.prototype.fetchUsers.route = ['get', '/users'];

    API.prototype.createUser = function(req, callback) {
      var data, email, name, options, ref;
      ref = req.body, email = ref.email, name = ref.name;
      data = _.pick(req.body, ['name', 'company', 'phone', 'location', 'email']);
      if (!(email && name)) {
        return req.res.status(302).send('paramErr');
      }
      options = {
        "new": true,
        upsert: true
      };
      return db.user.findOneAsync({
        email: email
      }).then(function(user) {
        if (user) {
          return req.res.status(302).send('emailUsed');
        } else {
          return db.user.createAsync(data).then(function(user) {
            return callback(null, formatUser(user));
          });
        }
      })["catch"](function() {
        return req.res.status(400).send('systemErr');
      });
    };

    API.prototype.createUser.route = ['post', '/users/create'];

    API.prototype.editUser = function(req, callback) {
      var email;
      email = req.body.email;
      if (!email) {
        return req.res.status(302).send('paramErr');
      }
      return db.user.findOneAndUpdate({
        email: email
      }, req.body, function(err, user) {
        if (err || !user) {
          return req.res.status(400).send('paramErr');
        } else {
          return callback(null, formatUser(user));
        }
      });
    };

    API.prototype.editUser.route = ['post', '/users/edit'];

    return API;

  })();

  module.exports = new API;

}).call(this);
