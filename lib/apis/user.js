// Generated by CoffeeScript 1.10.0
(function() {
  var API, _, db, formatUser, pluck, u, userSrv;

  _ = require('lodash');

  db = require('limbo').use('anmoyi');

  u = require('../services/util');

  userSrv = require('../services/user');

  pluck = function(keys) {
    return function(arr) {
      var rt;
      rt = [];
      arr.forEach(function(item) {
        return rt.push(_.pick(item, keys));
      });
      return rt;
    };
  };

  formatUser = function(user) {
    delete user.password;
    return user;
  };

  API = (function() {
    function API() {}

    API.prototype.login = function(req, callback) {
      var email, isPlace, password, ref;
      ref = req.body, email = ref.email, password = ref.password;
      isPlace = false;
      return db.user.findOneAsync({
        email: email
      }).then(function(user) {
        if (!user) {
          return db.place.findOneAsync({
            email: email
          }).then(function(place) {
            if (place) {
              isPlace = true;
            }
            return place;
          });
        } else {
          return user;
        }
      }).then(function(user) {
        if (!user) {
          return req.res.status(401).send('user');
        } else if (user && user.password !== password) {
          return req.res.status(401).send('password');
        } else {
          if (isPlace) {
            req.session._placeId = "" + user._id;
          } else {
            req.session._userId = "" + user._id;
          }
          return req.res.json(formatUser(user));
        }
      });
    };

    API.prototype.login.route = ['post', '/login'];

    API.prototype.login.validator = {
      email: "Email:required",
      password: "String:required"
    };

    API.prototype.logout = function(req, callback) {
      req.session._userId = '';
      return req.res.redirect('/login');
    };

    API.prototype.logout.route = ['get', '/logout'];

    API.prototype.me = function(req, callback) {
      var _userId;
      _userId = req.session._userId;
      if (_userId) {
        return db.user.findOne({
          _id: _userId
        }, function(err, user) {
          if (err || !user) {
            return req.res.status(401).send('user');
          } else {
            return callback(null, formatUser(user.toJSON()));
          }
        });
      } else {
        return req.res.status(401).send('user');
      }
    };

    API.prototype.me.route = ['get', '/users/me'];

    API.prototype.fetchUsers = function(req, callback) {
      return db.user.findAsync({}).then(function(users) {
        return callback(null, _.map(users, function(user) {
          return user.format();
        }));
      });
    };

    API.prototype.fetchUsers.route = ['get', '/users'];

    API.prototype.fetchUsers.before = [userSrv.isRoot];

    API.prototype.fetchAgents = function(req, callback) {
      return db.user.findAsync({
        role: 'agent'
      }).then(function(users) {
        return callback(null, _.map(users, function(user) {
          return user.format();
        }));
      });
    };

    API.prototype.fetchAgents.route = ['get', '/agents'];

    API.prototype.fetchAgents.before = [userSrv.isRoot];

    API.prototype.createUser = function(req, callback) {
      var data, email, name, ref, role;
      ref = req.body, email = ref.email, name = ref.name, role = ref.role;
      if (!(email && name && role)) {
        return req.res.status(302).send('paramErr');
      }
      if (role === 'agent') {
        data = _.pick(req.body, ['name', 'company', 'phone', 'location', 'email', 'mailAddress', 'qq', 'bankName', 'bankAccount', 'role']);
      } else {
        data = _.pick(req.body, ['name', 'phone', 'email', 'role']);
      }
      data.password = parseInt(Math.random() * 1000000 - 1);
      return db.user.findOneAsync({
        email: email
      }).then(function(user) {
        if (user) {
          return req.res.status(302).send('emailUsed');
        } else {
          return db.user.createAsync(data).then(function(user) {
            return callback(null, user.toJSON());
          });
        }
      })["catch"](function() {
        return req.res.status(400).send('systemErr');
      });
    };

    API.prototype.createUser.route = ['post', '/users/create'];

    API.prototype.createUser.before = [userSrv.isRoot];

    API.prototype.editUser = function(req, callback) {
      var email;
      email = req.body.email;
      if (!email) {
        return req.res.status(302).send('paramErr');
      }
      return db.user.findOneAndUpdate({
        email: email
      }, req.body, function(err, user) {
        if (err || !user) {
          return req.res.status(400).send('paramErr');
        } else {
          return callback(null, formatUser(user));
        }
      });
    };

    API.prototype.editUser.route = ['post', '/users/edit'];

    return API;

  })();

  module.exports = new API;

}).call(this);
