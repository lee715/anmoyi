// Generated by CoffeeScript 1.10.0
(function() {
  var API, _, db, formatUser, pluck, u, userSrv;

  _ = require('lodash');

  db = require('limbo').use('anmoyi');

  u = require('../services/util');

  userSrv = require('../services/user');

  pluck = function(keys) {
    return function(arr) {
      var rt;
      rt = [];
      arr.forEach(function(item) {
        return rt.push(_.pick(item, keys));
      });
      return rt;
    };
  };

  formatUser = function(user) {
    return user;
  };

  API = (function() {
    function API() {}

    API.prototype.login = function(req, callback) {
      var email, isPlace, password, ref;
      ref = req.body, email = ref.email, password = ref.password;
      isPlace = false;
      return db.user.findOneAsync({
        email: email
      }).then(function(user) {
        if (!user) {
          return db.place.findOneAsync({
            email: email
          }).then(function(place) {
            if (place) {
              isPlace = true;
            }
            return place;
          });
        } else {
          return user;
        }
      }).then(function(user) {
        if (!user) {
          return req.res.status(401).send('user');
        } else if (user && user.password !== password) {
          return req.res.status(401).send('password');
        } else {
          if (isPlace) {
            req.session._placeId = "" + user._id;
          } else {
            req.session._userId = "" + user._id;
          }
          return req.res.json(formatUser(user));
        }
      });
    };

    API.prototype.login.route = ['post', '/login'];

    API.prototype.login.validator = {
      email: "Email:required",
      password: "String:required"
    };

    API.prototype.logout = function(req, callback) {
      req.session._userId = '';
      req.session._placeId = '';
      return req.res.redirect('/login');
    };

    API.prototype.logout.route = ['get', '/logout'];

    API.prototype.me = function(req, callback) {
      var user;
      user = req._data.user.toJSON();
      user.now = (new Date).getTime();
      return callback(null, user);
    };

    API.prototype.me.route = ['get', '/users/me'];

    API.prototype.me.before = [userSrv.isLogined];

    API.prototype.fetchUsers = function(req, callback) {
      return db.user.findAsync({}).then(function(users) {
        return callback(null, _.map(users, function(user) {
          return user.format();
        }));
      });
    };

    API.prototype.fetchUsers.route = ['get', '/users'];

    API.prototype.fetchUsers.before = [userSrv.isRoot];

    API.prototype.fetchAgents = function(req, callback) {
      return db.user.findAsync({
        role: 'agent'
      }).then(function(users) {
        return callback(null, _.map(users, function(user) {
          return user.format();
        }));
      });
    };

    API.prototype.fetchAgents.route = ['get', '/agents'];

    API.prototype.fetchAgents.before = [userSrv.isRoot];

    API.prototype.getById = function(req, callback) {
      var _id;
      _id = req.params._id;
      return db.user.findOneAsync({
        _id: _id
      }).then(function(user) {
        return callback(null, user && user.format());
      });
    };

    API.prototype.getById.route = ['get', '/agents/:_id'];

    API.prototype.getById.before = [userSrv.isLogined];

    API.prototype.createUser = function(req, callback) {
      var data, email, name, ref, role;
      ref = req.body, email = ref.email, name = ref.name, role = ref.role;
      if (!(email && name && role)) {
        return req.res.status(302).send('paramErr');
      }
      data = req.body;
      data.password = data.password || parseInt(Math.random() * 1000000 - 1);
      return db.user.findOneAsync({
        email: email
      }).then(function(user) {
        if (user) {
          return req.res.status(302).send('emailUsed');
        } else {
          return db.user.createAsync(data).then(function(user) {
            return callback(null, user.toJSON());
          });
        }
      })["catch"](function() {
        return req.res.status(400).send('systemErr');
      });
    };

    API.prototype.createUser.route = ['post', '/users'];

    API.prototype.createUser.before = [userSrv.isRoot];

    API.prototype.editUser = function(req, callback) {
      var email, password, ref;
      ref = req.body, email = ref.email, password = ref.password;
      if (!email) {
        return req.res.status(302).send('paramErr');
      }
      if (!password) {
        delete req.body.password;
      }
      return db.user.findOneAsync({
        email: email
      }).then(function(user) {
        if (!user) {
          req.res.status(400).send('paramErr');
        }
        _.assign(user, req.body);
        return user.saveAsync();
      }).then(function(user) {
        return callback(null, formatUser(user));
      })["catch"](function(e) {
        return callback(e);
      });
    };

    API.prototype.editUser.route = ['put', '/users'];

    return API;

  })();

  module.exports = new API;

}).call(this);
