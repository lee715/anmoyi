// Generated by CoffeeScript 1.9.1
(function() {
  var config, db, qs, redis, sendPayTmp, sockSrv, subscribe, weixinAPI;

  weixinAPI = require('./api');

  redis = require('../services/redis');

  db = require('limbo').use('anmoyi');

  qs = require('qs');

  config = require('config');

  sockSrv = require('../services/socket');

  subscribe = function(message, words) {
    return weixinAPI.sendMessage(message.fromusername, words || "感谢您关注 轻松驿客 ！");
  };

  sendPayTmp = function(uid, fromusername) {
    return db.device.findOne({
      uid: uid
    }, function(err, device) {
      var info;
      if (err || !device) {
        return subscribe("设备未找到，请联系管理员");
      } else {
        redis.setex("PAYINFO." + fromusername, 24 * 60 * 60, device.uid, function() {});
        info = device.getPayInfo();
        return weixinAPI.sendTemplateMessage({
          touser: fromusername,
          template_id: config.MP_WEIXIN.templateIDs.pay,
          url: config.host + "/" + config.h5.pay + "?openid=" + fromusername,
          topcolor: "#ff0000",
          data: {
            first: {
              value: "点击该链接付款"
            },
            keyword1: {
              value: (device.name || '1号') + " 按摩椅"
            },
            keyword2: {
              value: (info.cost + " 元") || "5元"
            },
            remark: {
              value: "请确认该按摩椅空闲"
            }
          }
        });
      }
    });
  };

  module.exports = function(message) {
    var action, code, event, eventkey, fromusername, ref, type, uid;
    type = message.msgtype;
    event = message.event;
    eventkey = message.eventkey;
    fromusername = message.fromusername;
    console.log(type, event, eventkey);
    if (type === 'event') {
      if (event === 'subscribe') {
        subscribe(message);
        if (/^qrscene/.test(eventkey)) {
          ref = eventkey.split('_'), action = ref[0], uid = ref[1];
          return sendPayTmp(uid, fromusername);
        }
      } else if (event === 'SCAN') {
        uid = eventkey;
        if (uid) {
          return sendPayTmp(uid, fromusername);
        }
      } else if (event === 'unsubscribe') {
        return console.log('unsubscribe');
      }
    } else if (type === 'text') {
      return subscribe(message);
    } else if (type === 'click') {
      if (eventkey === 'pay') {
        return redis.getAsync("PAYINFO." + fromusername).then(function(uid) {
          if (!uid) {
            return subscribe(message, "系统未检测到您扫描过任何设备，请先扫描一台设备二维码进行支付。");
          }
          return sendPayTmp(uid, fromusername);
        })["catch"](function(e) {
          return subscribe(message, "系统异常，请稍后再试！");
        });
      } else if (/^set/.test(eventkey)) {
        code = eventkey.split('_')[1];
        return redis.getAsync("PAYINFO." + fromusername).then(function(uid) {
          if (!uid) {
            return subscribe(message, "系统未检测到您使用的设备。请先支付使用按摩椅，再使用该功能！如已支付，请联系客服。");
          }
          return db.device.findOneAsync({
            uid: uid
          });
        }).then(function(device) {
          if (device.status !== 'work') {
            return subscribe(message, "您的服务时间已结束，如需继续使用，可以点击'支付续费'快捷续费！");
          }
          return sockSrv.set(device.uid, code, function(err) {
            if (err) {
              return subscribe(message, "操作失败，请稍后再试!");
            } else {
              return subscribe(message, "操作成功!");
            }
          });
        })["catch"](function(e) {
          return subscribe(message, "系统异常，请稍后再试！");
        });
      }
    }
  };

}).call(this);
