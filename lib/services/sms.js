// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, checkRedis, db, getService, getVcodeMsg, moment, monternet, record, redis, secondsToEndOfToday, twilio, u;

  twilio = require('./twilio');

  monternet = require('./monternet');

  u = require('./util');

  Promise = require('bluebird');

  redis = require('./redis');

  moment = require('moment');

  db = require('limbo').use('teambition');

  getService = function(locale) {
    if (locale === 'CHN') {
      return monternet;
    } else {
      return twilio;
    }
  };

  getVcodeMsg = function(msg, vcode) {
    return msg.replace('{vcode}', vcode);
  };

  secondsToEndOfToday = function() {
    var endOfDay, now, rest;
    endOfDay = moment().endOf('day').toDate().getTime();
    now = (new Date()).getTime();
    rest = parseInt((endOfDay - now) / 1000);
    return rest;
  };

  checkRedis = function(phone, msg, refer, _userId) {
    var MAXKEY, SENDKEY;
    MAXKEY = "SMS:MAX:" + refer + ":" + _userId;
    SENDKEY = "SMS:SENDING:" + phone;
    return redis.getAsync(SENDKEY).then(function(resp) {
      if (resp) {
        throw new Error('AlreadySended');
      }
      return redis.getAsync(MAXKEY);
    }).then(function(count) {
      var rest;
      count || (count = 0);
      if (count < 5) {
        rest = secondsToEndOfToday();
        return redis.setexAsync(MAXKEY, rest, ++count);
      } else {
        throw new Error('MaxError');
      }
    }).then(function() {
      return redis.setexAsync(SENDKEY, 60, 1);
    });
  };

  record = function(phone, msg, addtions, status, error) {
    var _userId, data, ip, refer;
    refer = addtions.refer, ip = addtions.ip, _userId = addtions._userId;
    delete addtions.refer;
    delete addtions.ip;
    delete addtions._userId;
    data = {
      phone: phone,
      msg: msg,
      refer: refer,
      ip: "" + ip,
      _userId: "" + _userId,
      addtions: addtions,
      status: status
    };
    if (error) {
      data.error = error && error.message || ("" + error);
    }
    return db.record.createAsync(data);
  };

  module.exports = {
    sendVcode: function(phone, msg, locale, addtions, callback) {
      var _userId, generateVcode, ip, refer, send;
      refer = addtions.refer, ip = addtions.ip, _userId = addtions._userId;
      send = Promise.promisify(getService(locale));
      generateVcode = Promise.promisify(u.generateVcode);
      return checkRedis(phone, msg, refer, _userId).then(function() {
        return generateVcode(phone);
      }).then(function(vcode) {
        var vcodeMsg;
        vcodeMsg = getVcodeMsg(msg, vcode);
        return send(phone, vcodeMsg);
      }).then(function() {
        return record(phone, msg, addtions, true);
      }).then(function() {
        return callback(null, 'ok');
      })["catch"](function(e) {
        record(phone, msg, addtions, false, e);
        return callback(e);
      }).error(function(e) {
        record(phone, msg, addtions, false, e);
        return callback(e);
      });
    },
    send: function(phone, msg, locale, addtions, callback) {
      var _userId, ip, refer, send;
      refer = addtions.refer, ip = addtions.ip, _userId = addtions._userId;
      send = Promise.promisify(getService(locale));
      return checkRedis(phone, msg, refer, _userId).then(function() {
        return send(phone, msg);
      }).then(function() {
        return record(phone, msg, addtions, true);
      }).then(function() {
        return callback(null, 'ok');
      })["catch"](function(e) {
        record(phone, msg, addtions, false, e);
        return callback(e);
      }).error(function(e) {
        record(phone, msg, addtions, false, e);
        return callback(e);
      });
    }
  };

}).call(this);
