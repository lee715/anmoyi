// Generated by CoffeeScript 1.10.0
(function() {
  var CronJob, DAY_KEY, MONTH_KEY, WEEK_KEY, clearDay, clearMonth, clearWeek, countDay, countMonth, countWeek, cron, db, moment, redis;

  redis = require('./redis');

  moment = require('moment');

  cron = require('cron');

  CronJob = require('cron').CronJob;

  db = require('limbo').use('anmoyi');

  DAY_KEY = 'INCOME.DAY.';

  WEEK_KEY = 'INCOME.WEEK.';

  MONTH_KEY = 'INCOME.MONTH.';

  countDay = function(uid, income, wxTime) {
    var now, startDay;
    startDay = moment().startOf('day').toDate().getTime();
    now = moment().toDate().getTime();
    if (now - startDay < 1000 * 60 * 10) {
      return redis.get("" + DAY_KEY + uid, function(err, rt) {
        if (!rt) {
          rt = [];
        } else {
          rt = JSON.parse(rt);
        }
        rt.push([income, wxTime]);
        return redis.set("" + DAY_KEY + uid, JSON.stringify(rt), function() {});
      });
    }
  };

  countWeek = function(uid, income, wxTime) {
    var now, start;
    start = moment().startOf('week').toDate().getTime();
    now = moment().toDate().getTime();
    if (now - start < 1000 * 60 * 10) {
      return redis.get("" + WEEK_KEY + uid, function(err, rt) {
        if (!rt) {
          rt = [];
        } else {
          rt = JSON.parse(rt);
        }
        rt.push(income);
        return redis.set("" + WEEK_KEY + uid, JSON.stringify(rt), function() {});
      });
    }
  };

  countMonth = function(uid, income, wxTime) {
    var now, start;
    start = moment().startOf('month').toDate().getTime();
    now = moment().toDate().getTime();
    if (now - start < 1000 * 60 * 10) {
      return redis.get("" + MONTH_KEY + uid, function(err, rt) {
        if (!rt) {
          rt = [];
        } else {
          rt = JSON.parse(rt);
        }
        rt.push(income);
        return redis.set("" + MONTH_KEY + uid, JSON.stringify(rt), function() {});
      });
    }
  };

  clearDay = function() {
    return db.device.find({}, function(err, devices) {
      if (devices) {
        return devices.forEach(function(device) {
          var uid;
          uid = device.uid;
          return redis.get("" + DAY_KEY + uid, function(err, rt) {
            var income, len, wxTime;
            if (rt) {
              rt = JSON.parse(rt);
              len = rt.length;
              if (len < 2) {
                return;
              }
              income = (rt[len - 1][0] - rt[0][0]) || 0;
              wxTime = (rt[len - 1][1] - rt[0][1]) || 0;
              db.income.create({
                _deviceId: device._id,
                uid: device.uid,
                income: income,
                wxTime: wxTime,
                type: 'day',
                created: moment().startOf('day').toDate()
              });
              return redis.del("" + DAY_KEY + uid);
            }
          });
        });
      }
    });
  };

  clearWeek = function() {
    return db.device.find({}, function(err, devices) {
      if (devices) {
        return devices.forEach(function(device) {
          var uid;
          uid = device.uid;
          return redis.get("" + WEEK_KEY + uid, function(err, rt) {
            var income, len, wxTime;
            if (rt) {
              rt = JSON.parse(rt);
              len = rt.length;
              if (len < 2) {
                return;
              }
              income = (rt[len - 1][0] - rt[0][0]) || 0;
              wxTime = (rt[len - 1][1] - rt[0][1]) || 0;
              db.income.create({
                _deviceId: device._id,
                uid: device.uid,
                income: income,
                wxTime: wxTime,
                type: 'week',
                created: moment().startOf('week').day('monday').toDate()
              });
              return redis.del("" + WEEK_KEY + uid);
            }
          });
        });
      }
    });
  };

  clearMonth = function() {
    return db.device.find({}, function(err, devices) {
      if (devices) {
        return devices.forEach(function(device) {
          var uid;
          uid = device.uid;
          return redis.get("" + MONTH_KEY + uid, function(err, rt) {
            var income, len, wxTime;
            if (rt) {
              rt = JSON.parse(rt);
              len = rt.length;
              if (len < 2) {
                return;
              }
              income = (rt[len - 1][0] - rt[0][0]) || 0;
              wxTime = (rt[len - 1][1] - rt[0][1]) || 0;
              db.income.create({
                _deviceId: device._id,
                uid: device.uid,
                income: income,
                wxTime: wxTime,
                type: 'month',
                created: moment().startOf('month').toDate()
              });
              return redis.del("" + MONTH_KEY + uid, function() {});
            }
          });
        });
      }
    });
  };

  new CronJob('00 00 1 * * *', function() {
    return clearDay();
  }, function() {
    return consol.log('day done');
  }, true);

  new CronJob('00 00 1 * * 1', function() {
    return clearWeek();
  }, function() {
    return consol.log('week done');
  }, true);

  new CronJob('00 00 1 1 * *', function() {
    return clearMonth();
  }, function() {
    return consol.log('month done');
  }, true);

  module.exports = function(uid, income, wxTime) {
    if (!uid) {
      return;
    }
    console.log('income:', uid, income, wxTime);
    countDay(uid, income);
    countWeek(uid, income);
    return countMonth(uid, income);
  };

}).call(this);
