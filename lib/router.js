// Generated by CoffeeScript 1.9.1
(function() {
  var _toJSON, errSrv, wrap;

  errSrv = require('./services/err');

  module.exports = function(router, controller, middlewares, prefix) {
    var fn, funName, func;
    if (middlewares == null) {
      middlewares = [];
    }
    if (prefix == null) {
      prefix = '';
    }
    fn = function(func) {
      var after, before, method, ref, route, urls, urlsStr;
      route = func.route, before = func.before, after = func.after;
      ref = func.route, method = ref[0], urls = ref[1];
      urlsStr = urls.toString();
      return urlsStr.split(',').forEach(function(url) {
        url = prefix + url.replace(/:_id/g, ':_id([0-9a-fA-F]{24})');
        console.log(url);
        return router[method](url, middlewares.concat(before || [], wrap(func), after || []));
      });
    };
    for (funName in controller) {
      func = controller[funName];
      if (typeof func !== 'function') {
        continue;
      }
      if (!func.route) {
        continue;
      }
      fn(func);
    }
    router.use(function(err, req, res, next) {
      if (err) {
        if (typeof err === 'string') {
          err = errSrv(err);
        }
        return res.status(400).json(err);
      } else {
        return next();
      }
    });
    return router.use(function(req, res, next) {
      if (req.template) {
        return res.render(req.template, req.result);
      } else if (req.redirect) {
        console.log('redirect:', req.redirect);
        return res.redirect(req.redirect);
      } else if (req.result != null) {
        if (typeof req.result === 'string') {
          return res.send(req.result);
        } else {
          return res.json(req.result);
        }
      } else {
        return next();
      }
    });
  };

  wrap = function(func) {
    return function(req, res, next) {
      return func(req, function(err, result) {
        if (err === 'noContent') {
          return res.status(204).json({});
        }
        if (err != null) {
          return next(err);
        }
        req.result = result instanceof Array ? result.map(_toJSON) : _toJSON(result);
        return next();
      });
    };
  };

  _toJSON = function(obj) {
    if ((obj != null ? obj.toJSON : void 0) == null) {
      return obj;
    }
    return obj.toJSON();
  };

}).call(this);
