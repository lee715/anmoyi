// Generated by CoffeeScript 1.10.0
(function() {
  var API, MP_API, WX_API, _, async, config, db, deviceJson, formatUser, pluck, redis, sockSrv, u, wxReply;

  config = require('config');

  _ = require('lodash');

  db = require('limbo').use('anmoyi');

  u = require('./services/util');

  WX_API = require('./weixin/api');

  MP_API = require('./weixin/mpApi');

  async = require('async');

  wxReply = require('./weixin/message');

  sockSrv = require('./services/socket');

  redis = require('./services/redis');

  pluck = function(keys) {
    return function(arr) {
      var rt;
      rt = [];
      arr.forEach(function(item) {
        return rt.push(_.pick(item, keys));
      });
      return rt;
    };
  };

  deviceJson = ['_id', 'lastUsed', 'uid', '_userId', 'created', 'updated', 'place', 'location', 'price', 'status', 'discount', 'remission', 'income'];

  formatUser = function(user) {
    return _.pick(user, ['_id', 'role', 'email', 'name', 'company', 'phone', 'location']);
  };

  API = (function() {
    function API() {}

    API.prototype.unifiedorder = function(req, callback) {
      var openid, productid;
      openid = req.query.openid;
      productid = u.v1();
      return WX_API.getBrandWCPayRequestParams(openid, function(err, rt) {
        return callback(err, rt);
      });
    };

    API.prototype.unifiedorder.route = ['get', '/wx/unifiedorder'];

    API.prototype.getUserInfoCode = function(req, callback) {
      var body, code, query;
      body = req.body, query = req.query;
      code = query.code;
      if (!code) {
        return callback('unbindError');
      }
      return async.waterfall([
        function(next) {
          return MP_API.getUserInfoToken(code, function(err, token, openid) {
            return next(null, token, openid);
          });
        }, function(token, openid, next) {
          return MP_API.getUserInfo(token, openid, next);
        }, function(user, next) {
          return next();
        }
      ], function(err) {
        req.redirect = config.LONG_TICKET.url;
        return callback();
      });
    };

    API.prototype.getUserInfoCode.route = ['get', '/code'];

    API.prototype.getAuthUrl = function(req, callback) {
      return callback(null, WX_API.getViewUrl({
        scope: "snsapi_userinfo"
      }));
    };

    API.prototype.getAuthUrl.route = ['get', '/auth'];

    API.prototype.getTicketUrl = function(req, callback) {
      var uid;
      uid = req.query.uid;
      return MP_API.getQrcodeTicket(uid, function(err, ticket) {
        return callback(err, ticket.url);
      });
    };

    API.prototype.getTicketUrl.route = ['get', '/ticket'];

    API.prototype.orderDevice = function(req, callback) {
      var _orderId, action, openid, ref, uid;
      ref = req.query, uid = ref.uid, _orderId = ref._orderId, action = ref.action, openid = ref.openid;
      if (!(uid && openid && _orderId)) {
        return callback(new Error('paramErr'));
      }
      return redis.getAsync("ORDER.COMMAND.LOCK." + _orderId).then(function(lock) {
        if (lock) {
          throw new Error('order is handling');
        }
        return redis.setexAsync("ORDER.COMMAND.LOCK." + _orderId, 60 * 10, 1);
      }).then(function() {
        return db.order.findOneAsync({
          _id: _orderId,
          openId: openid,
          uid: uid
        }).then(function(order) {
          if (!order) {
            throw new Error('orderNotFound');
          }
          if (order.status === 'SUCCESS') {
            if (action === "start") {
              return sockSrv.startAsync(uid, order.time).then(function(state) {
                if (!state) {
                  throw new Error('start failed');
                }
                order.serviceStatus = 'STARTED';
                return order.saveAsync();
              }).then(function() {
                return db.device.updateAsync({
                  uid: uid
                }, {
                  status: 'work'
                }, {
                  upsert: false,
                  "new": false
                });
              }).then(function() {
                return callback(null, 'ok');
              });
            } else if (action === '1F' || action === '20' || action === '1E' || action === '21' || action === '22' || action === '24') {
              return sockSrv.setAsync(uid, action).then(function() {
                return callback(null, 'ok');
              });
            } else {
              throw new Error('unknownAction');
            }
          } else {
            throw new Error('unvalidOrder');
          }
        });
      }).then(function() {
        return redis.del("ORDER.COMMAND.LOCK." + _orderId);
      })["catch"](function(e) {
        return callback(e);
      });
    };

    API.prototype.orderDevice.route = ['get', '/command'];

    return API;

  })();

  module.exports = new API;

}).call(this);
